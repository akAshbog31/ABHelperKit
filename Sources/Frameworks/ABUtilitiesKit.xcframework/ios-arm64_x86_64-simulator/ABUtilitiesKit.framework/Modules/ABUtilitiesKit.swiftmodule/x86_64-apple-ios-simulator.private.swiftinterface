// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ABUtilitiesKit
@_exported import ABUtilitiesKit
import AVKit
import AppTrackingTransparency
import Foundation
import SafariServices
import StoreKit
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension Foundation.Bundle {
  public var appName: Swift.String {
    get
  }
  public func decode<T>(_ file: Swift.String) -> T where T : Swift.Decodable, T : Swift.Encodable
}
public enum DateFormatType : Swift.String {
  case twelveHourWithDayOfMonth
  case abbreviatedDayWithFullDate
  case iso8601
  case fullDayWithFullDate
  case monthDayYearWithTime
  case abbreviatedMonthDayWithTime
  case hourMinuteSecondWithMilliseconds
  case monthDayYear
  case monthDayYearSlashes
  case twelveHourTime
  case fullMonthYear
  case dayMonthYearDots
  case shortDayShortMonthYear
  case shortDayShortMonth
  case shortMonthDayYear
  case fullDayFullMonthYear
  case fullMonthDayYear
  case dayMonthYear
  case fullYear
  case shortYear
  case monthDay
  case shortMonthDay
  case shortMonthYear
  case monthYear
  case day
  case fullDay
  case month
  case fullMonth
  case shortTime
  case longTime
  case hhmma
  case shortMonth
  case longMonth
  case shortWeekday
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension Foundation.Date {
  public func toString(format: ABUtilitiesKit.DateFormatType) -> Swift.String
}
extension Swift.String {
  public func toDate(_ format: ABUtilitiesKit.DateFormatType) -> Foundation.Date
}
extension Swift.Dictionary {
  public func decode<T>() -> T? where T : Swift.Decodable, T : Swift.Encodable
}
extension Dispatch.DispatchQueue {
  public func after(time interval: Foundation.TimeInterval, work: @escaping () -> Swift.Void)
}
extension Swift.Int {
  public var asDeviceHeight: CoreFoundation.CGFloat {
    get
  }
  public var asDeviceWidth: CoreFoundation.CGFloat {
    get
  }
}
extension Swift.Double {
  public var asDeviceHeight: CoreFoundation.CGFloat {
    get
  }
  public var asDeviceWidth: CoreFoundation.CGFloat {
    get
  }
}
extension Swift.Float {
  public var asDeviceHeight: CoreFoundation.CGFloat {
    get
  }
  public var asDeviceWidth: CoreFoundation.CGFloat {
    get
  }
}
extension CoreFoundation.CGFloat {
  public var asDeviceHeight: CoreFoundation.CGFloat {
    get
  }
  public var asDeviceWidth: CoreFoundation.CGFloat {
    get
  }
}
extension Swift.FloatingPoint {
  public func toString(withDecimalPlaces places: Swift.Int) -> Swift.String
}
extension Swift.RandomAccessCollection {
  public func indexed() -> Swift.Array<(offset: Swift.Int, element: Self.Element)>
}
extension Swift.String {
  public func trim() -> Swift.String
  public func trimmingAllSpaces(using characterSet: Foundation.CharacterSet = .whitespacesAndNewlines) -> Swift.String
}
extension Swift.String {
  public var isBlank: Swift.Bool {
    get
  }
  public var isEmail: Swift.Bool {
    get
  }
  public var isPhoneNumber: Swift.Bool {
    get
  }
  public var isValidPassword: Swift.Bool {
    get
  }
}
extension Swift.String {
  public func encoded() -> Swift.String
  public func decoded() -> Swift.String
  public func reverse() -> Swift.String
}
extension SwiftUICore.Color {
  public init(hex: Swift.String)
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func Print(_ vars: Any...) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func eraseToAnyView() -> SwiftUICore.AnyView
  @_Concurrency.MainActor @preconcurrency public func cornerRadius(_ radius: CoreFoundation.CGFloat, corners: UIKit.UIRectCorner) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func ondidLoad(_ perform: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func onWillAppear(_ perform: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func dragToDismiss(onDismiss: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func shakeOnError(isError: Swift.Bool) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func glow(color: SwiftUICore.Color, radius: CoreFoundation.CGFloat) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func readGeometry(perform action: @escaping (CoreFoundation.CGRect) -> Swift.Void) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func popUp<V>(isPresented: SwiftUICore.Binding<Swift.Bool>, @SwiftUICore.ViewBuilder content: @escaping () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func Divider(height: CoreFoundation.CGFloat = 1, color: SwiftUICore.Color) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func CenterVStack<V>(@SwiftUICore.ViewBuilder content: @escaping () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func CenterHStack<V>(@SwiftUICore.ViewBuilder content: @escaping () -> V) -> some SwiftUICore.View where V : SwiftUICore.View
  
}
extension UIKit.UIAlertController {
  @_Concurrency.MainActor @preconcurrency public func addSpinner()
}
extension UIKit.UIApplication {
  @_Concurrency.MainActor @preconcurrency public static var keyWindow: UIKit.UIWindow? {
    get
  }
}
extension UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency public func animate(interval: Foundation.TimeInterval = 0.3, _ doThis: (() -> Swift.Void)? = nil)
}
extension UIKit.UICollectionView {
  @_Concurrency.MainActor @preconcurrency public func deque<Cell>(indexPath: Foundation.IndexPath) -> Cell where Cell : UIKit.UICollectionViewCell
  @_Concurrency.MainActor @preconcurrency public func deque<Cell>(indexPath: Foundation.IndexPath, kind: Swift.String) -> Cell where Cell : UIKit.UICollectionViewCell
  @_Concurrency.MainActor @preconcurrency public func reload()
  @_Concurrency.MainActor @preconcurrency public func registerCell<Cell>(cell: Cell.Type) where Cell : UIKit.UICollectionViewCell
  @_Concurrency.MainActor @preconcurrency public func registerHeaderCell<Cell>(cell: Cell.Type, kind: Swift.String) where Cell : UIKit.UICollectionViewCell
}
extension UIKit.UICollectionReusableView {
  @_Concurrency.MainActor @preconcurrency public static var reuseIdentifier: Swift.String {
    get
  }
}
extension UIKit.UIColor {
  convenience public init(hexString: Swift.String, alpha: CoreFoundation.CGFloat = 1.0)
  public func toHexString() -> Swift.String
}
extension UIKit.UILabel {
  @_Concurrency.MainActor @preconcurrency public func halfTextColorChange(fullText: Swift.String, changeText: Swift.String, color: UIKit.UIColor = .gray, font: UIKit.UIFont?)
}
extension UIKit.UITapGestureRecognizer {
  @_Concurrency.MainActor @preconcurrency public func didTapAttributedTextInLabel(label: UIKit.UILabel, inRange targetRange: Foundation.NSRange) -> Swift.Bool
}
extension UIKit.UIStackView {
  @_Concurrency.MainActor @preconcurrency public func addViews(views: [UIKit.UIView])
  @_Concurrency.MainActor @preconcurrency public func removeFully(view: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency public func removeFullyAllArrangedSubviews()
}
extension UIKit.UIStoryboard {
  @_Concurrency.MainActor @preconcurrency public func viewController<T>(vc: T.Type) -> T where T : UIKit.UIViewController
}
extension UIKit.UITableView {
  @_Concurrency.MainActor @preconcurrency public func deque<Cell>() -> Cell where Cell : UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency public func reload()
  @_Concurrency.MainActor @preconcurrency public func registerCell<Cell>(cell: Cell.Type) where Cell : UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency public func registerHeaderCell<Cell>(cell: Cell.Type) where Cell : UIKit.UITableViewHeaderFooterView
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func superview<T>(of type: T.Type) -> T?
  @_Concurrency.MainActor @preconcurrency public func subview<T>(of type: T.Type) -> T?
  @_Concurrency.MainActor @preconcurrency public func subviews<T>(ofType WhatType: T.Type) -> [T]
}
extension UIKit.UIView {
  @discardableResult
  @_Concurrency.MainActor @preconcurrency public func loadFromNib<T>() -> T? where T : UIKit.UIView
  @_Concurrency.MainActor @preconcurrency public func fixInView(_ container: UIKit.UIView, with padding: CoreFoundation.CGFloat = 0)
  @_Concurrency.MainActor @preconcurrency public func addEqualConstraintsWith(_ view: UIKit.UIView, with constant: CoreFoundation.CGFloat = 0)
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func isHidden(_ isHidden: Swift.Bool, in stackView: UIKit.UIStackView)
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func addShadow(ofColor color: UIKit.UIColor = .gray, radius: CoreFoundation.CGFloat = 3, offset: CoreFoundation.CGSize = .zero, opacity: Swift.Float = 0.5)
  @_Concurrency.MainActor @preconcurrency public func roundCorners(_ corners: UIKit.UIRectCorner, radius: CoreFoundation.CGFloat)
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public static var identifier: Swift.String {
    get
  }
}
public enum ABAlert {
  public static func getTopMostVc() -> UIKit.UIViewController?
  public static func showAlert(title: Swift.String = Bundle.main.appName, titleFont: UIKit.UIFont = .systemFont(ofSize: 18.asDeviceWidth, weight: .semibold), msg: Swift.String? = nil, msgFont: UIKit.UIFont = .systemFont(ofSize: 13.asDeviceWidth, weight: .regular), options: Swift.String..., btnStyle: UIKit.UIAlertAction.Style..., completion: @escaping ((Swift.Int) -> Swift.Void))
  public static func showAlert(title: Swift.String = Bundle.main.appName, titleFont: UIKit.UIFont = .systemFont(ofSize: 18.asDeviceWidth, weight: .semibold), msg: Swift.String? = nil, msgFont: UIKit.UIFont = .systemFont(ofSize: 13.asDeviceWidth, weight: .regular), buttonText: Swift.String? = "Ok", complition: (() -> Swift.Void)? = nil)
  public static func loadingAlert(title: Swift.String? = nil, font: UIKit.UIFont = .systemFont(ofSize: 18.asDeviceWidth, weight: .semibold)) -> UIKit.UIAlertController
  public static func gotoSettingAlert(msg: Swift.String)
  public static func shareApp(with appID: Swift.String)
  public static func shareData(with data: [Any])
  public static func openSafari(urlStr: Swift.String)
  public static func open(_ urlString: Swift.String, fallbackURL: Swift.String? = nil)
  public static func openMail(to mail: Swift.String)
  public static func rateApp()
  public static func requestTracking(complition: @escaping () -> Swift.Void)
  public static func checkTrackingPermission() -> Swift.Bool
  public static func hideKeyboard()
}
public enum ABHaptic {
  public static func feedback(for hapticFeedback: ABUtilitiesKit.ABHapticFeedback)
}
public enum ABHapticFeedback {
  case selection
  case impact(style: UIKit.UIImpactFeedbackGenerator.FeedbackStyle)
  case notification(type: UIKit.UINotificationFeedbackGenerator.FeedbackType)
}
extension ABUtilitiesKit.DateFormatType : Swift.Equatable {}
extension ABUtilitiesKit.DateFormatType : Swift.Hashable {}
extension ABUtilitiesKit.DateFormatType : Swift.RawRepresentable {}

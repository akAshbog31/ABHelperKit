// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ABRouterKitSwiftUI
@_exported import ABRouterKitSwiftUI
import Combine
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class ABRouter<T> : Combine.ObservableObject where T : Swift.Equatable {
  public var stack: [T] {
    get
  }
  public init(initial: T)
  public func push(_ route: T)
  public func pop()
  public func popTo(_ route: T, inclusive: Swift.Bool = false)
  public func setRoot(_ route: T)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public typealias ABRouteMap<T, Screen> = (T) -> Screen
@_Concurrency.MainActor @preconcurrency public struct ABRouterHost<T, Screen> : SwiftUICore.View where T : Swift.Equatable, Screen : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(_ router: ABRouterKitSwiftUI.ABRouter<T>, @SwiftUICore.ViewBuilder _ routeMap: @escaping ABRouterKitSwiftUI.ABRouteMap<T, Screen>)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s18ABRouterKitSwiftUI0A4HostV4bodyQrvp", 0) __<T, Screen>
}
extension ABRouterKitSwiftUI.ABRouterHost : Swift.Sendable {}
